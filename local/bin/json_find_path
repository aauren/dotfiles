#!/usr/bin/python
# pylint: disable=C0103
import argparse
import json
import os
import re
from pprint import pprint


def parse_args():
    argp = argparse.ArgumentParser()
    argp.add_argument("key_to_find", type=str, help="key to find")
    argp.add_argument("json_file", type=str, help="json file to find the key in")
    argp.add_argument("-a", dest="output_all_paths", action="store_true", help="output all paths at the end")
    argp.add_argument("-j", dest="jq_path", action="store_true", help="output as a jq path")
    argp.add_argument("-v", dest="with_values", action="store_true",
                      help="output the value of the path as well as the path")
    return argp.parse_args()


def find_element(element, my_json, path, paths):
    if element in my_json:
        path = path + element
        if jq_path:
            print("\n." + path)
        else:
            print("\n" + path)
        if output_values:
            if isinstance(my_json[element], dict):
                print(json.dumps(my_json[element], indent=3))
            else:
                pprint(my_json[element], depth=3, indent=9)
        paths.append(path)
    for key in my_json:
        if isinstance(my_json[key], dict):
            if jq_path and re.search(r"[^a-zA-Z0-9]", key):
                path_key = '"' + key + '"'
            else:
                path_key = key
            find_element(element, my_json[key], path + path_key + '.', paths)

all_paths = []

args = parse_args()
key_to_find = args.key_to_find
json_file = args.json_file
output_all_paths = args.output_all_paths
jq_path = args.jq_path
output_values = args.with_values
parsed_json = json.load(open(os.path.join(os.path.dirname(__file__), json_file), "r"))
find_element(key_to_find, parsed_json, '', all_paths)

if output_all_paths:
    print("\n=============================================== All Paths ==============================================")
    print(json.dumps(all_paths, indent=3))
