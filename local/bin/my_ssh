#!/bin/bash
# shellcheck disable=SC1117

# Here so that you're returned to a shell
trap "{ exec /bin/zsh; }" SIGINT

# Here to consolidate SSH files
if [[ -d "${HOME}/.ssh/config.d" ]]; then
	cat "${HOME}/.ssh/config.d/"* >"${HOME}/.ssh/config"
fi

# shellcheck source=/dev/null
source "${HOME}/bin/helpers.sh"

OPTIND=1
app_name="$(basename "${0}")"
app_signature="${app_name} [OPTION] IP_ADDRESS|DNS_NAME"
usage="usage: ${app_signature}
An SSH wrapper script that makes sure that the host is available
and listening on the desired port first, and optionally sets up
the requested host with my specified environment. It will also keep
attempting to reconnect to the host.

Options:
  -h,-?\t\tdisplay this help text and exit
  -A\t\tforward the SSH agent
  -c\t\trun a command upon SSH'ing
  -e\t\tdon't setup environment on remote machine
  -v\t\trun with verbose logging to show what's happening
  -z\t\trun ZSH upon SSH'ing"

parse_args ()
{
	while getopts "h?eAzvc:" opt; do
		case "${opt}" in
			A) additional_ssh_opts+=( "-A" );;
			c) mycmd="${OPTARG}";;
			e) nosetup=true;;
			h|\?) echo -e "${usage}"; exit 0;;
			v) verbose=true; set -x; additional_ssh_opts+=( "-vvv" );;
			z) zsh=true;;
		esac
	done

	shift $((OPTIND-1))
	if [[ -z ${1} ]]; then
		echo "You must specify an IP address or host to connect to: ${app_signature}" >> /dev/stderr
		echo "HINT: use -h for more usage information" >> /dev/stderr
		exit 1
	fi
	remote_host="${1}"
}


main ()
{
	local -i RETVAL=0
	local HOST=${remote_host:-not_set}

	[[ "${HOST}" == "not_set" ]] && exit 1

	# Separate host string into parts
	if [[ "${HOST}" == *@* ]]; then
		hostname="${HOST##*@}"
		# shellcheck disable=SC2034
		username="${HOST%@*}"
	else
		hostname="${HOST}"
	fi


	# Check to see if an SSH port is explicitely defined in ssh config files
	my_ssh_port="$(parse_ssh_config | grep "${hostname}" |cut -d',' -f 3)"
	unaliased_ssh_host="$(resolve_host_from_ssh_config "${hostname}")"
	local -a host_opts
	export my_ssh_port unaliased_ssh_host

	if [[ "PROXYJUMP" == "${unaliased_ssh_host}" ]]; then
		echo "ProxyJump detected for host, skipping host setup and healthchecks..."
	elif [[ -e "${HOME}/.ssh/no_check_hosts" ]] && grep -q -f "${HOME}/.ssh/no_check_hosts" <<<"${unaliased_ssh_host}"; then
		echo "Detected No Check Host (~/.ssh/no_check_hosts)..."
	else
		if [[ -e "${HOME}/.ssh/unavailable_hosts" ]] && grep -qf "${HOME}/.ssh/unavailable_hosts" <<<"${unaliased_ssh_host}"; then
			echo "Unavailable host detected (~/.ssh/unavailable_hosts)"
			host_opts+=("-p")
		fi
		if [[ -e "${HOME}/.ssh/no_nodeup_hosts" ]] && grep -q -f "${HOME}/.ssh/no_nodeup_hosts" <<<"${unaliased_ssh_host}"; then
			echo "No Node Up was found for host, skipping..."
		else
			echo "Checking Host Status..."
			is_node_up "${host_opts[@]}" "${unaliased_ssh_host}" "${my_ssh_port:-22}"
		fi

		if [[ -e "${HOME}/.ssh/no_setup_hosts" ]] && grep -q -f "${HOME}/.ssh/no_setup_hosts" <<<"${unaliased_ssh_host}"; then
			echo "Detected No Remote Env Setup Host (~/.ssh/no_setup_hosts)..."
			nosetup=true
		fi

		if [[ -z ${nosetup} && ("${HOST}" != *@* || ${HOST%@*} != "root") ]]; then
			echo "Setting Up Remove Env..."
			if [[ -n "${verbose}" ]]; then
				setup_remote_env -v "${HOST}"
			else
				setup_remote_env "${HOST}"
			fi
		fi
	fi
	# Command here will run SSH as the literally SSH and not loop back into this wrapper script
	if [[ -n "${mycmd}" ]]; then
		command ssh -qtt "${additional_ssh_opts[@]}" "${HOST}" "${mycmd}" || RETVAL=${?}
	elif [[ -n "${zsh}" ]]; then
		command ssh -qtt "${additional_ssh_opts[@]}" "${HOST}" "[[ -x /bin/zsh ]] && exec bash -l -c 'exec /bin/zsh'" || RETVAL=${?}
	else
		command ssh -q "${additional_ssh_opts[@]}" "${HOST}" || RETVAL=${?}
	fi

	printf "\nSSH Exit Code: %d\n\n" ${RETVAL}
	printf "\n%s\n\n" "$(date)"

	return ${RETVAL}
}

declare -a additional_ssh_opts

parse_args "$@"

time while : ; do
	main "${1}" && break
	sleep 15
done

exec /bin/zsh
