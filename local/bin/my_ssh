#!/bin/bash

source "${HOME}/bin/helpers.sh"

OPTIND=1
app_name="$(basename "${0}")"
app_signature="${app_name} [OPTION] IP_ADDRESS|DNS_NAME"
usage="usage: ${app_signature}
An SSH wrapper script that makes sure that the host is available
and listening on the desired port first, and optionally sets up
the requested host with my specified environment. It will also keep
attempting to reconnect to the host.

Options:
  -h,-?\t\tdisplay this help text and exit
  -e\t\tdon't setup environment on remote machine"

parse_args ()
{
	while getopts "h?e" opt; do
		case "${opt}" in
			h|\?) echo -e "${usage}"; exit 0;;
			e) nosetup=true;;
		esac
	done

	shift $((OPTIND-1))
	if [[ -z ${1} ]]; then
		echo "You must specify an IP address or host to connect to: ${app_signature}" >> /dev/stderr
		echo "HINT: use -h for more usage information" >> /dev/stderr
		exit 1
	fi
	remote_host="${1}"
}


main ()
{
	local -i RETVAL=0
	local HOST=${remote_host:-not_set}

	[[ "${HOST}" == "not_set" ]] && exit 1

	# Separate host string into parts
	if [[ "${HOST}" == *@* ]]; then
		hostname="${HOST##*@}"
		username="${HOST%@*}"
	else
		hostname="${HOST}"
	fi


	# Check to see if an SSH port is explicitely defined in ssh config files
	my_ssh_port="$(parse_ssh_config | grep "${hostname}" |cut -d',' -f 3)"
	unaliased_ssh_host="$(resolve_host_from_ssh_config "${hostname}")"
	export my_ssh_port unaliased_ssh_host

	echo "Checking Host Status..."
	is_node_up "${unaliased_ssh_host}" "${my_ssh_port:-22}"

	# Start by deleting the old SSH key in case the system has been rebooted since then
	echo "Removing previous known hosts that might exist..."
	ssh_key_del "${unaliased_ssh_host}" "${my_ssh_port:-22}"

	if [[ -z ${nosetup} && ("${HOST}" != *@* || ${HOST%@*} == $(whoami)) && "root" != $(whoami) ]]; then
		echo "Setting Up Remove Env..."
		setup_remote_env "${HOST}" "${unaliased_ssh_host}" "${my_ssh_port}"
	fi
	# Command here will run SSH as the literally SSH and not loop back into this wrapper script
	command ssh -Aq "${HOST}" || RETVAL=${?}

	printf "\nSSH Exit Code: %d\n\n" ${RETVAL}
	printf "\n%s\n\n" "$(date)"

	return ${RETVAL}
}

parse_args "$@"

time while : ; do
	main "${1}" && break
	sleep 15
done
