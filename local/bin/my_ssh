#!/bin/bash

source "${HOME}/bin/helpers.sh"

main ()
{
	local -i RETVAL=0
	local HOST=${1:-not_set}

	[[ "${HOST}" == "not_set" ]] && exit 1

	# Separate host string into parts
	if [[ "${HOST}" == *@* ]]; then
		hostname="${HOST##*@}"
		username="${HOST%@*}"
	else
		hostname="${HOST}"
	fi


	# Check to see if an SSH port is explicitely defined in ssh config files
	my_ssh_port="$(parse_ssh_config | grep "${hostname}" |cut -d',' -f 3)"
	unaliased_ssh_host="$(resolve_host_from_ssh_config "${hostname}")"
	export my_ssh_port unaliased_ssh_host

	echo "Checking Host Status..."
	is_node_up "${unaliased_ssh_host}" "${my_ssh_port:-22}"

	# Start by deleting the old SSH key in case the system has been rebooted since then
	echo "Removing previous known hosts that might exist..."
	ssh_key_del "${unaliased_ssh_host}" "${my_ssh_port:-22}"

	if [[ ("${HOST}" != *@* || ${HOST%@*} == $(whoami)) && "root" != $(whoami) ]]; then
		echo "Setting Up Remove Env..."
		setup_remote_env "${HOST}" "${unaliased_ssh_host}" "${my_ssh_port}"
	fi
	# Command here will run SSH as the literally SSH and not loop back into this wrapper script
	command ssh -Aq "${HOST}" || RETVAL=${?}

	printf "\nSSH Exit Code: %d\n\n" ${RETVAL}
	printf "\n%s\n\n" "$(date)"

	return ${RETVAL}
}

time while : ; do
	main "${1}" && break
	sleep 15
done
