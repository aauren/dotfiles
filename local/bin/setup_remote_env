#!/bin/bash -e

#### Constants ####
SSH_OPTS="-AT -o LogLevel=Error -o BatchMode=yes -o ConnectTimeout=5"
RSYNC_OPTS="-rpt --size-only --ignore-times"
EXCLUDE_GIT_DIR="--cvs-exclude"

# Dotfile location
DOTFILE_LOCATION='${HOME}/dotfiles/'
LITERAL_DOT_LOC="${HOME}/dotfiles/"

# Vundle Location
VUNDLE_LOC='${HOME}/.vim/bundle/'
LIT_VUNDLE_LOC="${HOME}/.vim/bundle/"

# Vim autoload Location
VIMAUTO_LOC='${HOME}/.vim/autoload/'
LIT_VIMAUTO_LOC="${HOME}/.vim/autoload/"

# Bin location
BIN_LOC='${HOME}/bin'
LIT_BIN_LOC="${HOME}/bin/"

GIT_REMOTE_UPDATE_COMMANDS="cd ${DOTFILE_LOCATION} && \
	git stash &>/dev/null && \
	git pull replaceme master &>/dev/null && \
	echo ok"
UPDATE_HOME_COMMANDS="RCRC=${DOTFILE_LOCATION}/rcrc PATH=${PATH}:${DOTFILE_LOCATION}/local/init/linker/bin ${DOTFILE_LOCATION}/local/init/linker/bin/rcup -x local && \
	mkdir -p ~/bin && \
	${DOTFILE_LOCATION}/local/bin/create_syms &> /dev/null && \
	touch ~/.keep && \
	touch ~/.viminfo &>/dev/null || true"
GIT_URL_EXTRACT='s/.*git@([^:]+).*/\1/g'
# Set correct sed options based on kernel versions
if [[ $(uname -a) == *"Darwin"* ]]; then
	SED_OPTS="-E"
else
	SED_OPTS="-r"
fi

#### Initialize Input ####
ssh_conn_str="${1}"

#### Function Declarations ####
update_git ()
{
	echo "Updating git..."
	IFS_BAK=${IFS}
	IFS=$'\n'
	git_remotes=( $(grep "^\[remote" "${LITERAL_DOT_LOC}.git/config" | sed ${SED_OPTS} 's/^\[remote "(.+)".*/\1/g') )
	IFS=${IFS_BAK}
	for gremote in "${git_remotes[@]}"; do
		url=$(grep -A2 "${gremote}" "${LITERAL_DOT_LOC}.git/config" | grep url | sed ${SED_OPTS} ${GIT_URL_EXTRACT})
		if [[ $(command ssh ${SSH_OPTS} ${ssh_conn_str} "PATH=${PATH}:${DOTFILE_LOCATION}/local/bin is_node_up -n ${url} 22 &>/dev/null && \
			echo ok") == "ok" ]]; then
			echo "Syncing with ${url}"
			command ssh ${SSH_OPTS} ${ssh_conn_str} "PATH=${PATH}:${DOTFILE_LOCATION}/local/bin ssh_key_del ${url} &>/dev/null"
			git_update_cmd=${GIT_REMOTE_UPDATE_COMMANDS//replaceme/${gremote}}
			if [[ $(command ssh ${SSH_OPTS} ${ssh_conn_str} ${git_update_cmd}) == "ok" ]]; then
				echo "Sync successful"
				break
			fi
		fi
	done
}

update_home ()
{
	echo "Updating home env..."
	command ssh ${SSH_OPTS} ${ssh_conn_str} ${UPDATE_HOME_COMMANDS}
}

#### Main Program Flow ####
echo "Syncing dotfiles..."
rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} --rsync-path="mkdir -p ${VUNDLE_LOC} && rsync" "${LIT_VUNDLE_LOC}" "${ssh_conn_str}:${VUNDLE_LOC}" &>/dev/null &
rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LIT_VIMAUTO_LOC}" "${ssh_conn_str}:${VIMAUTO_LOC}" &>/dev/null &
rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LITERAL_DOT_LOC}" "${ssh_conn_str}:${DOTFILE_LOCATION}" &>/dev/null
rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LIT_BIN_LOC}" "${ssh_conn_str}:${BIN_LOC}" &>/dev/null
update_home

# This was the old flow. Keeping it for now in case I ever want to go back
#if \ssh ${SSH_OPTS} ${ssh_conn_str} "[[ -d ${DOTFILE_LOCATION} ]]"; then
#	echo "Dotfiles exist, updating git..."
#	update_git
#	update_home
#else
#	echo "Dotfiles missing, syncing..."
#	rsync ${RSYNC_OPTS} "${LITERAL_DOT_LOC}" "${ssh_conn_str}:${DOTFILE_LOCATION}" &>/dev/null
#	\ssh ${SSH_OPTS} ${ssh_conn_str} "mkdir -p ${VUNDLE_LOC}" 2>/dev/null
#	rsync ${RSYNC_OPTS} "${LIT_VUNDLE_LOC}" "${ssh_conn_str}:${VUNDLE_LOC}" &>/dev/null
#	update_home
#	update_git
#	update_home
#fi
