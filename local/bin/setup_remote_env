#!/bin/bash

#### Constants ####
SSH_OPTS="-A -o LogLevel=Error -o BatchMode=yes -o ConnectTimeout=5"
RSYNC_OPTS="-rpt --size-only --ignore-times"
DOTFILE_LOCATION='${HOME}/dotfiles/'
LITERAL_DOT_LOC="${HOME}/dotfiles/"
VUNDLE_LOC='${HOME}/.vim/bundle/'
LIT_VUNDLE_LOC="${HOME}/.vim/bundle/"
GIT_REMOTE_UPDATE_COMMANDS="cd ${DOTFILE_LOCATION} && \
	git pull replaceme &>/dev/null && \
	echo ok"
UPDATE_HOME_COMMANDS="RCRC=${DOTFILE_LOCATION}/rcrc PATH=${PATH}:${DOTFILE_LOCATION}/local/init/linker/bin ${DOTFILE_LOCATION}/local/init/linker/bin/rcup && \
	mkdir -p ~/bin && \
	${DOTFILE_LOCATION}/local/bin/create_syms.sh &> /dev/null"
GIT_URL_EXTRACT='s/.*git@([^:]+).*/\1/g'
if [[ $(uname -a) == *"Darwin"* ]]; then
	SED_OPTS="-E"
else
	SED_OPTS="-r"
fi

#### Initialize Input ####
remote_server="${1}"

#### Function Declarations ####
update_git ()
{
	echo "Updating git..."
	IFS_BAK=${IFS}
	IFS=$'\n'
	git_remotes=( $(grep "^\[remote" "${LITERAL_DOT_LOC}.git/config" | sed ${SED_OPTS} 's/^\[remote "(.+)".*/\1/g') )
	IFS=${IFS_BAK}
	for gremote in "${git_remotes[@]}"; do
		url=$(grep -A2 "${gremote}" "${LITERAL_DOT_LOC}.git/config" | grep url | sed ${SED_OPTS} ${GIT_URL_EXTRACT})
		if [[ $(\ssh ${SSH_OPTS} ${remote_server} "PATH=${PATH}:${DOTFILE_LOCATION}/local/bin nc -vzw 5 ${url} 22 &>/dev/null && \
			echo ok") == "ok" ]]; then
			echo "Syncing with ${url}"
			\ssh ${SSH_OPTS} ${remote_server} "PATH=${PATH}:${DOTFILE_LOCATION}/local/bin ssh_key_del ${url} &>/dev/null"
			git_update_cmd=${GIT_REMOTE_UPDATE_COMMANDS//replaceme/${gremote}}
			if [[ $(\ssh ${SSH_OPTS} ${remote_server} ${git_update_cmd}) == "ok" ]]; then
				echo "Sync successful"
				break
			fi
		fi
	done
}

update_home ()
{
	echo "Updating home env..."
	\ssh ${SSH_OPTS} ${remote_server} ${UPDATE_HOME_COMMANDS}
}

#### Main Program Flow ####
if \ssh ${SSH_OPTS} ${remote_server} "[[ -d ${DOTFILE_LOCATION} ]]"; then
	echo "Dotfiles exist, updating git..."
	update_git
	update_home
else
	echo "Dotfiles missing, syncing..."
	rsync ${RSYNC_OPTS} "${LITERAL_DOT_LOC}" "${remote_server}:${DOTFILE_LOCATION}" &>/dev/null
	\ssh ${SSH_OPTS} ${remote_server} "mkdir -p ${VUNDLE_LOC}" 2>/dev/null
	rsync ${RSYNC_OPTS} "${LIT_VUNDLE_LOC}" "${remote_server}:${VUNDLE_LOC}" &>/dev/null
	update_home
	update_git
	update_home
fi
