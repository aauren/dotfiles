#!/bin/bash -e

# In case the user sends us SIG_INT, we attempt to return_output to its previous state before exiting
trap return_output INT

#### Constants ####
SSH_OPTS="-AT -o BatchMode=yes -o ConnectTimeout=5"
RSYNC_OPTS="-rptX --old-args --size-only --ignore-times --no-links"
EXCLUDE_GIT_DIR="--cvs-exclude"
# The jedi-vim plugin is huge and is mostly unnecessary on remote systems
EXCLUDE_JEDI_VIM="--exclude jedi-vim --exclude coc* --exclude terraform-ls --exclude ale"

# Dotfile location
DOT='dotfiles/'
LOCAL_DOT_LOC="${HOME}/${DOT}/"

# Vundle Location
VUNDLE='.vim/bundle/'
LOCAL_VUNDLE_LOC="${HOME}/${VUNDLE}"

# Vim autoload Location
VIMAUTO='.vim/autoload/'
LOCAL_VIMAUTO_LOC="${HOME}/${VIMAUTO}"

# Bin location
BIN="bin"
LOCAL_BIN_LOC="${HOME}/${BIN}/"

GIT_URL_EXTRACT='s/.*git@([^:]+).*/\1/g'
# Set correct sed options based on kernel versions
if [[ $(uname -a) == *"Darwin"* ]]; then
	SED_OPTS="-E"
else
	SED_OPTS="-r"
fi

OPTIND=1
app_name="$(basename "${0}")"
app_signature="${app_name} [OPTION] IP_ADDRESS|DNS_NAME"
usage="usage: ${app_signature}
A script used to sync important home directories to remote servers.
This sets up a basic environment for productivity.

Options:
  -h,-?\t\tdisplay this help text and exit
  -o\t\tpass ssh options to ssh command
  -v\t\trun with verbose logging to show what's happening"

#### Function Declarations ####
parse_args ()
{
	while getopts "h?o:v" opt; do
		case "${opt}" in
			h|\?) echo -e "${usage}"; exit 0;;
			o) additional_ssh_opts+=( -o "${OPTARG}" );;
			v) verbose=true; set -x;;
		esac
	done

	shift $((OPTIND-1))
	if [[ -z ${1} ]]; then
		echo "You must specify an IP address or host to connect to: ${app_signature}" >> /dev/stderr
		echo "HINT: use -h for more usage information" >> /dev/stderr
		exit 1
	fi
	ssh_conn_str="${1}"

	if [[ -n "${additional_ssh_opts}" ]]; then
		local ssh_opts_str="ssh"
		for ssh_opt in "${additional_ssh_opts[@]}"; do
			ssh_opts_str+=" ${ssh_opt}"
		done
		RSYNC_OPTS="${RSYNC_OPTS} -e \"${ssh_opts_str}\""
	fi
}

block_output() {
	if [[ -z "${verbose}" ]]; then
		# If verbose mode isn't specified, then we redirect stdout and stderr to /dev/null so that we don't see the results
		# of the following commands
		exec 6>&1 1>/dev/null # save a reference to stdin and then redirect it to /dev/null
		exec 7>&2 2>/dev/null # save a reference to stdout and then redirect it to /dev/null
		output_redirected=true
	fi
}

output_during_block() {
	if [[ -n "${output_redirected}" ]]; then
		printf -- "${@}" 1>&6
	else
		printf -- "${@}"
	fi
}

return_output() {
	if [[ -n "${output_redirected}" ]]; then
		# If output has been redirected, then we return stdout and stderr so that the go back to the way they were
		exec 1>&6 6>&- # restore reference to stdin and then remove the file handle
		exec 2>&7 7>&- # restore reference to stdin and then remove the file handle
		unset output_redirected
	fi
}

update_git ()
{
	echo "Updating git..."
	IFS_BAK=${IFS}
	IFS=$'\n'
	git_remotes=( $(grep "^\[remote" "${LOCAL_DOT_LOC}.git/config" | sed ${SED_OPTS} 's/^\[remote "(.+)".*/\1/g') )
	IFS=${IFS_BAK}
	for gremote in "${git_remotes[@]}"; do
		url=$(grep -A2 "${gremote}" "${LOCAL_DOT_LOC}.git/config" | grep url | sed ${SED_OPTS} ${GIT_URL_EXTRACT})
		if [[ $(command ssh ${SSH_OPTS} "${additional_ssh_opts[@]}" ${ssh_conn_str} "PATH=${PATH}:${DOT_LOC}/local/bin is_node_up -n ${url} 22 &>/dev/null && \
			echo ok") == "ok" ]]; then
			echo "Syncing with ${url}"
			command ssh ${SSH_OPTS} "${additional_ssh_opts[@]}" ${ssh_conn_str} "PATH=${PATH}:${DOT_LOC}/local/bin ssh_key_del ${url} &>/dev/null"
			git_update_cmd=${GIT_REMOTE_UPDATE_COMMANDS//replaceme/${gremote}}
			if [[ $(command ssh ${SSH_OPTS} "${additional_ssh_opts[@]}" ${ssh_conn_str} ${git_update_cmd}) == "ok" ]]; then
				echo "Sync successful"
				break
			fi
		fi
	done
}

update_home ()
{
	output_during_block "Updating home env... "
	capture_before_date
	command ssh ${SSH_OPTS} "${additional_ssh_opts[@]}" ${ssh_conn_str} ${UPDATE_HOME_COMMANDS}
	print_duration
}

setup_remote_home_vars() {
	REM_HOME="$(command ssh ${SSH_OPTS} "${additional_ssh_opts[@]}" ${ssh_conn_str} 'echo ${HOME}')"
	if [[ -n "${verbose}" ]]; then
		echo "REMOTE HOME: ${REM_HOME}"
	fi
	REMOTE_DOT_LOC="${REM_HOME}/${DOT}"
	REMOTE_VUNDLE_LOC="${REM_HOME}/${VUNDLE}"
	REMOTE_VIMAUTO_LOC="${REM_HOME}/${VIMAUTO}"
	REMOTE_BIN_LOC="${REM_HOME}/${BIN}"
	GIT_REMOTE_UPDATE_COMMANDS="cd ${REMOTE_DOT_LOC} && \
		git stash &>/dev/null && \
		git pull replaceme master &>/dev/null && \
		echo ok"
	UPDATE_HOME_COMMANDS="RCRC=${REMOTE_DOT_LOC}/rcrc PATH=${PATH}:${REMOTE_DOT_LOC}/local/init/linker/bin ${REMOTE_DOT_LOC}/local/init/linker/bin/rcup -x local && \
		mkdir -p ~/bin && \
		${REMOTE_DOT_LOC}/local/bin/create_syms &> /dev/null && \
		touch ~/.keep && \
		touch ~/.viminfo &>/dev/null || true"
}

capture_before_date() {
	start_dt="$(date +%s.%N)"
}

print_duration() {
	if [[ -n "${start_dt}" ]]; then
		end_dt="$(date +%s.%N)"
		# Using bc for floating point arithmatic
		duration="$(echo "$end_dt - $start_dt" | bc)"

		output_during_block "%s\n" "${duration}"
		unset start_dt
	fi
}

#### Main Program Flow ####
parse_args "$@"

# if verbose hasn't been set then set LogLevel to error
if [[ -z "${verbose}" ]]; then
	SSH_OPTS+=" -o LogLevel=Error"
fi

echo "Finding remote home..."
setup_remote_home_vars

echo "Syncing dotfiles..."
block_output
output_during_block "\tCreating Remote VIM Dirs - "
capture_before_date
command ssh ${SSH_OPTS} "${additional_ssh_opts[@]}" ${ssh_conn_str} "mkdir -p ${REMOTE_VUNDLE_LOC}"
print_duration

output_during_block "\tSyncing vim vundles - "
capture_before_date
eval rsync ${RSYNC_OPTS} --delete ${EXCLUDE_GIT_DIR} ${EXCLUDE_JEDI_VIM} "${LOCAL_VUNDLE_LOC}" "${ssh_conn_str}:${REMOTE_VUNDLE_LOC}"
print_duration

output_during_block "\tSyncing vim autoload - "
capture_before_date
eval rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LOCAL_VIMAUTO_LOC}" "${ssh_conn_str}:${REMOTE_VIMAUTO_LOC}"
print_duration

output_during_block "\tSyncing dotfile - "
capture_before_date
eval rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LOCAL_DOT_LOC}" "${ssh_conn_str}:${REMOTE_DOT_LOC}"
print_duration

output_during_block "\tSyncing local bin - "
capture_before_date
eval rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LOCAL_BIN_LOC}" "${ssh_conn_str}:${REMOTE_BIN_LOC}"
print_duration

return_output
update_home
