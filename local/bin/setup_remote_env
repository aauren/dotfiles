#!/bin/bash -e

# In case the user sends us SIG_INT, we attempt to return_output to its previous state before exiting
trap return_output INT

#### Constants ####
SSH_OPTS="-AT -o BatchMode=yes -o ConnectTimeout=5"
RSYNC_OPTS="-rptX --old-args --size-only --ignore-times --no-links"
EXCLUDE_GIT_DIR="--cvs-exclude"
# The jedi-vim plugin is huge and is mostly unnecessary on remote systems
EXCLUDE_JEDI_VIM="--exclude jedi-vim --exclude coc* --exclude terraform-ls --exclude ale"

# Dotfile location
DOTFILE_LOCATION='${HOME}/dotfiles/'
LITERAL_DOT_LOC="${HOME}/dotfiles/"

# Vundle Location
VUNDLE_LOC='${HOME}/.vim/bundle/'
LIT_VUNDLE_LOC="${HOME}/.vim/bundle/"

# Vim autoload Location
VIMAUTO_LOC='${HOME}/.vim/autoload/'
LIT_VIMAUTO_LOC="${HOME}/.vim/autoload/"

# Bin location
BIN_LOC='${HOME}/bin'
LIT_BIN_LOC="${HOME}/bin/"

GIT_REMOTE_UPDATE_COMMANDS="cd ${DOTFILE_LOCATION} && \
	git stash &>/dev/null && \
	git pull replaceme master &>/dev/null && \
	echo ok"
UPDATE_HOME_COMMANDS="RCRC=${DOTFILE_LOCATION}/rcrc PATH=${PATH}:${DOTFILE_LOCATION}/local/init/linker/bin ${DOTFILE_LOCATION}/local/init/linker/bin/rcup -x local && \
	mkdir -p ~/bin && \
	${DOTFILE_LOCATION}/local/bin/create_syms &> /dev/null && \
	touch ~/.keep && \
	touch ~/.viminfo &>/dev/null || true"
GIT_URL_EXTRACT='s/.*git@([^:]+).*/\1/g'
# Set correct sed options based on kernel versions
if [[ $(uname -a) == *"Darwin"* ]]; then
	SED_OPTS="-E"
else
	SED_OPTS="-r"
fi

OPTIND=1
app_name="$(basename "${0}")"
app_signature="${app_name} [OPTION] IP_ADDRESS|DNS_NAME"
usage="usage: ${app_signature}
A script used to sync important home directories to remote servers.
This sets up a basic environment for productivity.

Options:
  -h,-?\t\tdisplay this help text and exit
  -v\t\trun with verbose logging to show what's happening"

#### Function Declarations ####
parse_args ()
{
	while getopts "h?v" opt; do
		case "${opt}" in
			h|\?) echo -e "${usage}"; exit 0;;
			v) verbose=true; set -x;;
		esac
	done

	shift $((OPTIND-1))
	if [[ -z ${1} ]]; then
		echo "You must specify an IP address or host to connect to: ${app_signature}" >> /dev/stderr
		echo "HINT: use -h for more usage information" >> /dev/stderr
		exit 1
	fi
	ssh_conn_str="${1}"
}

block_output() {
	if [[ -z "${verbose}" ]]; then
		# If verbose mode isn't specified, then we redirect stdout and stderr to /dev/null so that we don't see the results
		# of the following commands
		exec 6>&1 1>/dev/null # save a reference to stdin and then redirect it to /dev/null
		exec 7>&2 2>/dev/null # save a reference to stdout and then redirect it to /dev/null
		output_redirected=true
	fi
}

return_output() {
	if [[ -n "${output_redirected}" ]]; then
		# If output has been redirected, then we return stdout and stderr so that the go back to the way they were
		exec 1>&6 6>&- # restore reference to stdin and then remove the file handle
		exec 2>&7 7>&- # restore reference to stdin and then remove the file handle
	fi
}

update_git ()
{
	echo "Updating git..."
	IFS_BAK=${IFS}
	IFS=$'\n'
	git_remotes=( $(grep "^\[remote" "${LITERAL_DOT_LOC}.git/config" | sed ${SED_OPTS} 's/^\[remote "(.+)".*/\1/g') )
	IFS=${IFS_BAK}
	for gremote in "${git_remotes[@]}"; do
		url=$(grep -A2 "${gremote}" "${LITERAL_DOT_LOC}.git/config" | grep url | sed ${SED_OPTS} ${GIT_URL_EXTRACT})
		if [[ $(command ssh ${SSH_OPTS} ${ssh_conn_str} "PATH=${PATH}:${DOTFILE_LOCATION}/local/bin is_node_up -n ${url} 22 &>/dev/null && \
			echo ok") == "ok" ]]; then
			echo "Syncing with ${url}"
			command ssh ${SSH_OPTS} ${ssh_conn_str} "PATH=${PATH}:${DOTFILE_LOCATION}/local/bin ssh_key_del ${url} &>/dev/null"
			git_update_cmd=${GIT_REMOTE_UPDATE_COMMANDS//replaceme/${gremote}}
			if [[ $(command ssh ${SSH_OPTS} ${ssh_conn_str} ${git_update_cmd}) == "ok" ]]; then
				echo "Sync successful"
				break
			fi
		fi
	done
}

update_home ()
{
	echo "Updating home env..."
	command ssh ${SSH_OPTS} ${ssh_conn_str} ${UPDATE_HOME_COMMANDS}
}

#### Main Program Flow ####
parse_args "$@"

# if verbose hasn't been set then set LogLevel to error
if [[ -z "${verbose}" ]]; then
	SSH_OPTS+=" -o LogLevel=Error"
fi

echo "Syncing dotfiles..."
block_output
rsync ${RSYNC_OPTS} --delete ${EXCLUDE_GIT_DIR} --rsync-path="mkdir -p ${VUNDLE_LOC} && rsync " ${EXCLUDE_JEDI_VIM} "${LIT_VUNDLE_LOC}" "${ssh_conn_str}:${VUNDLE_LOC}"
rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LIT_VIMAUTO_LOC}" "${ssh_conn_str}:${VIMAUTO_LOC}"
rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LITERAL_DOT_LOC}" "${ssh_conn_str}:${DOTFILE_LOCATION}"
rsync ${RSYNC_OPTS} ${EXCLUDE_GIT_DIR} "${LIT_BIN_LOC}" "${ssh_conn_str}:${BIN_LOC}"
return_output
update_home
