#!/bin/bash
# Shows a list of branches for the first parameter (usually something like "refs" or "refs/heads")
# May be used with the following options as the second parameter (will only accept one of the following):
#  * -c: non-color - strips color from the output (useful for pipeing into other commands)
#  * -s: select - puts your into a mode to select a branch out of the output (automatically change to that branch)
#  * -v: verbose - after it finishes listing the branches it will show you the file change differences

format_git_branches () {
	if [[ $(uname -a) == *"Darwin"* ]]; then
		SED_EXE='gsed'
	else
		SED_EXE='sed'
	fi
	RED=$(tput setaf 1)
	BLUE=$(tput setaf 4)
	BOLD_WHITE=$(tput bold; tput setaf 7)
	RESET=$(tput sgr0)
	BOLD_RED=$(tput bold; tput setaf 1)
	GREEN=$(tput setaf 2)
	local mystr branch_name not_merged
	local fmt="ref=%(refname:short); authordate=%(authordate:relative); commiterdate=%(committerdate); authorname=%(authorname); sha1=%(objectname);"
	not_merged="$(git branch --no-merge)"
	echo -e "==========================================Branches================================================"
	local -i count=1
	local -a branches
	while read -r entry; do
		eval "${entry}"
		local nomerge files_changed
		# $ref $authordate and $authorname is actually set but the eval entry above, format of "git for-each-ref" is as follows:
		# ref="master"; authordate="25 hours ago"; commiterdate="Tue Feb 19 12:04:02 2019 -0600"; authorname="<auther_name>"; sha1="e132403f6cd07d2e12874a4c6f0b31a4d8d3637d";
		# shellcheck disable=SC2154
		files_changed="$(git log "${ref}" --not --remotes=*/master --stat --pretty="format:" | grep '|')"
		branches+=("${ref}")
		if grep -q "/" <<<"${ref}"; then
			ref="$("${SED_EXE}" -r 's;[a-zA-Z]+/(.*)$;\1;'<<<"${ref}")"
		fi
		# We'll use a hybrid of the above command and the output of git branch --no-merge to check for changes
		if [[ "${files_changed}" ]] || echo "${not_merged}" | grep -q -e "^[ ]*${ref}[ ]*$"; then
			nomerge="(*)"
		fi
		if [[ "${2}" && "${2}" == "-s" ]]; then
			printf "${BOLD_RED}[%3i]${RESET} " $((count++))
		fi
		if [[ "${2}" && "${2}" == "-c" ]]; then
			# shellcheck disable=SC2154
			printf "%-30s" "${authordate}"
			# shellcheck disable=SC2154
			printf "%-25s" "${authorname}"
			# shellcheck disable=SC2154
			printf "%s%s\\n" "${ref}" "${nomerge}"
		else
			printf "${BLUE}%-30s${RESET}" "${authordate}"
			printf "${RED}%-25s${RESET}" "${authorname}"
			printf "${BOLD_WHITE}%s${RESET}${BOLD_RED}%s${RESET}\\n" "${ref}" "${nomerge}"
		fi
		if [[ "${2}" && "${2}" == "-v" && "${files_changed}" ]]; then
			mystr="${mystr}$(printf "%s%s%s:\\n " "${RED}" "${ref}" "${RESET}")"
			while read -r file_lines; do
				file_part1="${file_lines%|*}"
				file_part2="${file_lines##*|}"
				file_part1="$("${SED_EXE}" -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' <<< "${file_part1}")"
				file_part2="$("${SED_EXE}" -r "s/(\\+*)(-*)/${GREEN}\\1${RESET}${RED}\\2${RESET}/g" <<< "${file_part2}")"
				mystr="${mystr}$(printf "	%s%-60s%s -%s\\n " "${BOLD_WHITE}" "${file_part1}" "${RESET}" "${file_part2}")"
			done <<< "${files_changed}"
		fi
	done <<<"$(git for-each-ref --tcl --sort=-committerdate --format="${fmt}" "${1}")"

	if [[ "${2}" && "${2}" == "-s" ]]; then
		printf "\\n%sSelect Branch to Switch to (q to quit): %s" "${BOLD_WHITE}" "${RESET}"
		read -r uinput
		if [[ "${uinput}" == "q" ]]; then
			exit 0
		fi
		if ! [[ ${uinput} =~ ^[0-9]+$ && "$((uinput - 1))" -lt "${#branches[@]}" ]]; then
			echo "Could not validate input"
			exit 1
		fi
		# if the branch contains a slash, indicating that it is a remote, see if a non-remote version of the branch
		# exists and if it does switch to that one instead
		branch_name=${branches[$((uinput - 1))]}
		if grep -q "/" <<<"${branch_name}" &>/dev/null; then
			if git rev-parse --verify "${branch_name#*/}" &>/dev/null; then
				branch_name="${branch_name#*/}"
			fi
		fi
		echo "Switching to: ${branch_name}"
		git co "${branch_name}"
	fi

	if [[ "${2}" && "${2}" == "-v" ]]; then
		echo -e "\\n========================================File Changes=============================================="
		echo -e "${mystr}"
	fi
}

format_git_branches "$@"

# vim: set noet sw=4 ts=4
