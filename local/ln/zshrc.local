# OS Specific Settings {{{
if [[ $(uname -a) == *"Darwin"* ]]; then
	SED_OPTS='-E'
else
	SED_OPTS='-r'
fi
# }}}

# Variable and Option Settings {{{
# Don't log to history if the command is prepended with a space
setopt histignorespace

# Shared command history
#setopt inc_append_history # Not needed because it's already in the parent zshrc, but leaving here for completeness
setopt share_history

# Increase History size, to be gigantic
HISTSIZE=32768
SAVEHIST=32768
# }}}

# SSH Agent Setup {{{
# Command to start up ssh-agen if there is an SSH key in your profile
if [[ -z ${SSH_AUTH_SOCK} && -z $(pgrep ssh-agent) ]]; then
	eval $(ssh-agent)
fi

# Add any missing SSH identities
SSH_ADD=$(ssh-add -l)
for file in $(ls ${HOME}/.ssh/id*.pub 2> /dev/null); do
	identity=$(echo ${file} | sed ${SED_OPTS} 's/.*(\.ssh.*).pub/\1/g')
	if [[ $SSH_ADD != *${identity}* ]]; then
		echo "Identity didn't exist, adding: ${identity}"
		ssh-add ${identity}
	fi
done
# }}}

# ZSH Prompt Setup {{{
# Changes prompt to include information about Git repos and what zvim mode we're in
source "${HOME}/dotfiles/local/lib/git_prompt/git_prompt.sh"
local vi_normal_marker="[%{$fg[magenta]%}N%{$reset_color%}]"
local vi_insert_marker="[%{$fg[cyan]%}I%{$reset_color%}]"
local vi_unknown_marker="[%{$fg[red]%}U%{$reset_color%}]"
local vi_mode="$vi_insert_marker"
vi_mode_indicator () {
case ${KEYMAP} in
	(vicmd)      echo $vi_normal_marker ;;
	(main|viins) echo $vi_insert_marker ;;
	(*)          echo $vi_unknown_marker ;;
esac
}

# Reset mode-marker and prompt whenever the keymap changes
function zle-line-init zle-keymap-select {
	vi_mode="$(vi_mode_indicator)"
	zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

# The above works fine for most things, however, it doesn't seem to reset the prompt to insert mode after a SIGINT
# CTRL+C action. So we need the following to reset the indicator to the insert marker. See the comments in the following
# article for more information: http://paulgoscicki.com/archives/2012/09/vi-mode-indicator-in-zsh-prompt/
function TRAPINT() {
	vi_mode="${vi_insert_marker}"
	#zle && zle reset-prompt
	return $(( 128 + $1 ))
}

dir_info_prompt () {
	print -P '${SSH_CONNECTION+"%{$fg_bold[green]%}%n@%M:"}%{$fg_bold[blue]%}%~%{$reset_color%}'
}
rel_info_prompt () {
	if [[ -e /etc/gaikai-release && ( -n "${SSH_CLIENT}" || -n "${SSH_TTY}" ) ]]; then
		print -P ' (%{$fg_bold[magenta]%}$(cat /etc/gaikai-release)%{$reset_color%})'
	fi
}
export PROMPT='$(dir_info_prompt) $(rel_info_prompt) $(git_super_status)
%(?.%{$fg[green]%}[0].%{$fg[red]%}[%?])%{$reset_color%}${vi_mode}%# '
# }}}

# Key and Termcap Settings {{{
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

# Adds less color highlighting when it has disappeard from tmux
export LESS_TERMCAP_mb=$'\E[01;31m'                   # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'              # begin bold
export LESS_TERMCAP_me=$'\E[0m'                       # end mode
export LESS_TERMCAP_se=$'\E[0m'                       # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;016m\E[48;5;220m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'                       # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m'             # begin underline

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
function zle-line-init () {
	echoti smkx
}
function zle-line-finish () {
	echoti rmkx
}
zle -N zle-line-init
zle -N zle-line-finish
# }}}

# Custom Key Bindings and Shortcuts {{{
# Enter VI mode with jj
bindkey jj vi-cmd-mode

# Switch to incremental pattern search, plus ability to go forward and backward
bindkey -M viins '^R' history-incremental-pattern-search-backward
bindkey -M vicmd '/' history-incremental-pattern-search-backward
bindkey -M isearch '^R' history-incremental-search-backward
bindkey -M isearch '^F' history-incremental-search-forward

# re-sets yank and kill shortcuts to bash/emacs mode
bindkey -M viins '^P' push-line-or-edit
bindkey -M viins '^Y' yank
# In order to use the below you must first yank without hitting enter, then subsequent alt-y combos will cycle through
# kill ring
bindkey -M viins '\ey' yank-pop
bindkey -M viins '^U' backward-kill-line

# sets ctrl+b and ctrl+f to forward and backword by word
bindkey -M viins '^G' forward-word
bindkey -M viins '^F' backward-word
bindkey -M viins '^J' vi-beginning-of-line
bindkey -M viins '^K' vi-end-of-line
# }}}

# Local Functions (tmux_info, gitcm, load_colors, ff, fe) {{{

# }}}

# Additional File Sourcing (.zshrc.user.local & z) {{{
# Adds z (directory hopper) to the command line
source "${HOME}/dotfiles/local/lib/rupa-z/z.sh"

# Add additional zsh functions not in git
if [[ -e "${HOME}/.zshrc.user.local" ]]; then
	source "${HOME}/.zshrc.user.local"
fi

# Source misc functions
if [[ -e "${HOME}/.functions.local" ]]; then
	source "${HOME}/.functions.local"
fi
# }}}

# Path Additions and Cleanup {{{
# Add local bin file
if [[ -e ${HOME}/bin ]]; then
	PATH=${HOME}/bin:${PATH}
fi

# Finally clean up the path by removing duplicate entries
PATH=$(awk -v RS=':' -v ORS=":" '!a[$1]++{if (NR > 1) printf ORS; printf $a[$1]}' <<< "${PATH}")
# }}}

# Search history with peco <ALT+r> (needs to be below path declaration) {{{
# Search shell history with peco: https://github.com/peco/peco
if which peco &> /dev/null; then
	function peco_select_history() {
		local tac
		{ which gtac &> /dev/null && tac="gtac" } || { which tac &> /dev/null && tac="tac" } || tac="tail -r"
		BUFFER=$(fc -l -n 1 | eval $tac | peco --query "$LBUFFER")
		CURSOR=$#BUFFER # move cursor
		zle -R -c # refresh
	}

	zle -N peco_select_history
	bindkey '\er' peco_select_history
fi
# }}}

# vim: set noet ts=4 sw=4 fdm=marker
