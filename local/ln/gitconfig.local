[alias]
	l = log --pretty=colored
	cm = commit -m
	dc = diff --cached
	unstg = reset HEAD
	dt = difftool
	dtc = difftool --cached
	lg = log --color --graph --pretty=format:'%Cred%<(8)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate
	rc = rebase --continue
	can = commit --amend --no-edit
	ca = commit --amend -v
	# An alternative to git pull: git upfrom <remote> <branch-name>
	upfrom = "!f() { git fetch $1 --prune; git merge --ff-only $1/$2 || git rebase --preserve-merges $1/$2; }; f"
	sh = show HEAD
	cp = cherry-pick
	r9 = rebase -i HEAD~9
	r8 = rebase -i HEAD~8
	r7 = rebase -i HEAD~7
	r6 = rebase -i HEAD~6
	r5 = rebase -i HEAD~5
	r4 = rebase -i HEAD~4
	r3 = rebase -i HEAD~3
	r2 = rebase -i HEAD~2
	r1 = rebase -i HEAD~1
	cl = clone
	# Fetch branch from origin
	fob = fetch origin
	br = branch --all
	# Show all branches sorted, etc
	abrs = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs
	lbrs = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/heads
	po = push origin
	pof = push origin --force-with-lease
	up = "!f() { git fetch origin --prune; git merge --ff-only origin/master || git rebase --preserve-merges origin/master; }; f"
[user]
	name = Aaron U'Ren
[core]
	editor = vim
[diff]
	tool = vimdiff
[difftool]
	prompt = false
[include]
	path = ~/.gitconfig.user.local
[rerere]
	enabled = true
[branch]
	autoSetupMerge = always

# vim: set noet ts=2 sw=2
