" Tips and Tricks
"
" Search and Replace:
"   1. Change the currently searched for item by typing cgnReplacement<Esc>, repeat with .

" Change text width to 120 which is a more sensible default
set textwidth=120

" Change color scheme to dark solarized if bundles is available {{{
if filereadable(expand("~/.vimrc.bundles"))
  set background=dark
  colorscheme solarized
  "highlight NonText guibg=#060606
  "highlight Folded  guibg=#0A0A0A guifg=#9090D0
endif
" }}}

" Various mappings for CTRL+P {{{

" Search git directories faster by using silver searcher or ignoring git directories
let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m

    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  " Commenting this out for now because it will conflict with my other set of prompt matchings above
  "let g:ctrlp_prompt_mappings = {
  "  \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
  "  \ }
endif
" }}}

" Various items for NerdTree (Like close NerdTree when all other buffers are closed) {{{

augroup nerdtree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END

" }}}

" File type based autocmd's (e.g. python width 120, tab expansion for python, sh, etc, upconf and json settings {{{
augroup filetypes
  " Setting a different indentation for Python so that we get more than 80 characters in a column
  autocmd Filetype python set textwidth=120

  " Set different indent styles for different file types
  au Filetype python setlocal et ts=4 sw=4 sts=4 nowrap nofoldenable
  au Filetype sh setlocal ts=4 sw=4 sts=4 noexpandtab nowrap
  au Filetype ebuild setlocal ts=4 sw=4 sts=4 noexpandtab nowrap

  " Set file type to upconf template when it has deploy/config in the path
  autocmd BufRead,BufNewFile */deploy/config/* set filetype=upconf-template
  autocmd Filetype json let b:indentLine_ConcealOptionSet = 1
augroup END
" }}}

" Various whitespace highlighting, autocmds for EOL highlights and Yggdroot plugin configs for BOL highlights {{{
" The following pattern will match trailing whitespace, except when typing at the end of a line.
:highlight ExtraWhitespace ctermbg=red guibg=red

augroup whitespace
  :autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

  " If you use this alternate pattern, you may want to consider using the following autocmd to let the highlighting show
  " up as soon as you leave insert mode after entering trailing whitespace:
  " :autocmd InsertLeave * redraw!
  :au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  :au InsertLeave * match ExtraWhitespace /\s\+$/
augroup END

:match ExtraWhitespace /\s\+\%#\@<!$/

" Shows leading space using the indentLine plugin from Yggdroot
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_enabled = 0

" Don't run syntastic check on open
let g:syntastic_check_on_open = 0
" }}}

" Python pep8 configurations {{{
" Add ignores for annoying pep8 guidelines
let g:pep8_ignore="E501"
let g:pymode_lint_ignore="E501"
" }}}

" Use multiple presses of v to expand and ctrl-v to shrink regions {{{
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" Default settings. (NOTE: Remove comments in dictionary before sourcing)
let g:expand_region_text_objects = {
    \ 'iw'  :0,
    \ 'iW'  :0,
    \ 'i"'  :0,
    \ '^o$' :0,
    \ '0o$' :0,
    \ 'i''' :0,
    \ 'i]'  :1,
    \ 'ib'  :1,
    \ 'iB'  :1,
    \ 'il'  :0,
    \ 'ip'  :0,
    \ 'ie'  :0,
    \ }
" }}}

" My functions (toggle solarized background, etc) {{{

" Prevent replacing copy buffer on visual paste (preserve previous copy item on visual paste)
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction

function! MyTogBG()
  redir => s:curr_background
    silent execute "colorscheme"
  redir END
  let s:curr_background = substitute(s:curr_background, '\n', '', '')
  let &background = ( &background == "dark"? "" : "dark" )
  if s:curr_background =~? ".*default.*"
    exe "colorscheme " . s:background
  else
    exe "colorscheme default"
  endif
  let s:background = s:curr_background
endfunction
command ToggleBG :call MyTogBG()

function! MyTogTW()
  if &tw
    let s:txtwid = &textwidth
    let s:wrapmarg  = &wrapmargin
    let &textwidth  = 0
    let &wrapmargin = 0
  else
    let &textwidth = s:txtwid
    let &wrapmargin = s:wrapmarg
  endif
endfunction
command ToggleTextWidth :call MyTogTW()

function! ToggleCopyable()
  call MyTogBG()
  set list!
  set number!
  exe "LeadingSpaceToggle"
  call MyTogTW()
  exe "SyntasticToggleMode"
endfunction
command ToggleCopyable :call ToggleCopyable()

" }}}

" Remapping keys using combos and leaders {{{

" Various leader mappings for setting things like paste-mode and list mode
map <Leader>p :set paste!<CR>
" Leader mapping to allow for copying from vim
map <Leader>y :ToggleCopyable<CR>
" Toggle text width on and off
map <Leader>w :ToggleTextWidth<CR>
" Toggle showing certain whitespace characters
map <Leader>l :set list!<CR>:LeadingSpaceToggle<CR>
map <Leader>n :set number!<CR>
map <Leader>r :set relativenumber!<CR>
map <Leader>e :RunInInteractiveShell 
" Close the quickfix window (for things like pylint)
map <Leader>c :lclose<CR>
" Reset the color scheme to the default (in cases with unconfigured terminals)
map <Leader>csd :ToggleBG<CR>
" Delete item to the blackhole register (meaning it won't write over the buffer you already have going
nnoremap <Leader>dd "_dd
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d
" Map nerdtree to leader+t
:map <Leader>t :NERDTreeToggle<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo
cmap w!! w !sudo tee > /dev/null %

" Remap jj and JJ in quick succession to escape
:imap jj <Esc>
:imap JJ <Esc>

" Set tab merge alias to vertically split current tab and the tab to the right (or barring that, to the left)
" To put them back to tabs afterward, type CTRL+w, SHIFT+t
:map <C-t> <esc>:Tabmerge right<CR>

" Remap next and previous tab to Ctrl-PgDn and Ctrl-PgUp
:map <Esc>h :tabp<CR>
:map <Esc>l :tabn<CR>
:map <Esc>j :bn<CR>
:map <Esc>k :bp<CR>

" Add control based navigation to insert mode
:map <C-G> <C-Right>
:map! <C-G> <C-Right>
:map <C-F> <C-Left>
:map! <C-F> <C-Left>
:map <C-J> ^
:inoremap <C-J> <C-o>^
:map <C-K> $
:inoremap <C-K> <C-o>$

" Jump to the end of the text you just pasted
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Quickly select the text you just pasted
noremap gV `[v`]

" Change visual paste to use the Repl() function described in "Prevent replacing copy buffer..." section
vmap <silent> <expr> p <sid>Repl()
" }}}

" vim: fdm=marker ts=2 et
