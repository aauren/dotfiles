# Displays the tmux var valued passed as the first parameter
# shellcheck disable=SC2086
# shellcheck disable=SC2046
tmux_info() {
	local tmux_var="${1}"
	tmux display -pt "${TMUX_PANE:?}" "#{${tmux_var}}"
}

# Automatically try to determine git message
git_make_commit_message () {
	local changed_files message
	changed_files="$(git diff --name-only --cached)"
	repo_name="$(basename "$(git rev-parse --show-toplevel)")"
	if [[ "${repo_name}" == "charts" ]]; then
		message="$(sed -r 's;charts/([^/]+)/.*;\1;' <<<"${changed_files}" | sort -u)"
		if [[ $(wc -l <<<"${message}") -eq 1 ]]; then
			printf "%s" "${message}"
			return 0
		fi
		return 0
	elif [[ "${repo_name}" == "inventory-schema" ]]; then
		message="$(git diff --name-only --cached <<<"${changed_files}" | sed -r 's;poc/[0-9]{3}-([a-zA-Z]+[0-9])[^-]+-.*;\1;' | sort -u)"
		if [[ $(wc -l <<<"${message}") -eq 1 ]]; then
			printf "%s" "${message}"
			return 0
		fi
		return 0
	fi
	# If you don't match anything else, do this
	grep -o '[^/]*$' <<<"${changed_files}"| sed ':a;N;$!ba;s/\n/ \& /g'
	return 0
}

# Automatically creates a git commit message based on the files that are staged and prints it on the line
gitcm () {
	git --no-pager dc
	# shellcheck disable=SC1105,SC2116
	((sleep 0.1 && tmux send-keys -t "$(tmux_info session_name):$(tmux_info window_name).$(tmux_info pane_index)" "$(echo "git cm \"$(git_make_commit_message): ")") &)
}

# Loads a bunch of color variables into ZSH so that you can reference them as a variable by their name
load_colors () {
	autoload colors
	for COLOR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
		eval $COLOR='$fg_no_bold[${(L)COLOR}]'
		eval BOLD_$COLOR='$fg_bold[${(L)COLOR}]'
		eval BG_$COLOR='$bg[${(L)COLOR}]'
	done
	eval RESET='$reset_color'
}

# Traverse up to the specified directory
uptil () {
	current_dir="$(pwd)"
	while [[ "$(basename "${current_dir}")" != *"${1}"* ]]; do current_dir="$(dirname "${current_dir}")"; done
	# shellcheck disable=SC2164
	pushd "${current_dir}"
}

# Find a file with a pattern in name
ff() { find . -type f -iname '*'$*'*' -ls ; }

# Find a file with pattern $1 in name and Execute $2 on it
fe() { find . -type f -iname '*'$1'*' -exec "${2:-file}" {} \;  ; }

# Ping the specified host and include the date in the output
pingd() { ping $1 | while read -r pong; do echo "$(date): $pong"; done }

# Show broadcast routes for exabgp
exabgp_show_routes() {
	local socket_path="${1:-/run/exabgp/exabgp.socket}"
	if [[ -S "${socket_path}" ]]; then
		echo "show routes" | socat -  "UNIX-CONNECT:${socket_path}"
		return 0
	else
		echo "exabgp socket does not exist: ${socket_path}"
		return 1
	fi
}

# Parses input from selection
prompt_yes_no() {
	local prompt_text="${1}" uinput
	load_colors

	printf "\\n%s%s (y/n): %s" "${BOLD_WHITE}" "${prompt_text}" "${RESET}" 1>&2
	read -r uinput

	case "${uinput}" in
		[yY][eE][sS]|[yY])
			return 0;;
		*)
			return 1;;
	esac
}

# Prompts the user for a selection from a list of line delimitted options
prompt_for_selection() {
	local it uinput option param count bg_color
	local -a results
	load_colors

	count=1
	while read -r it; do
		bg_color=""
		if [[ $(( count % 2 )) -eq 1 ]]; then
			bg_color="${BG_BLACK}"
		fi
		printf "%s[%s%3i%s%s] - %s%s%s\\n" "${bg_color}" "${BOLD_RED}" "$((count++))" "${RESET}" "${bg_color}" "${BLUE}" "${it}" "${RESET}" 1>&2
		results+=( "${it}" )
	done <<<"${1}"
	printf "\\n%sChoose option (q to quit): %s" "${BOLD_WHITE}" "${RESET}" 1>&2
	read -r uinput

	for param in ${uinput}; do
		if [[ "${param}" == "q" ]]; then
			return 1
		fi
		if [[ "${param}" =~ ^[[:digit:]]+$ ]]; then
			option="${results[${param}]}"
			#echo "chose: ${option}" 1>&2
		else
			echo "Option selected was not recognized, quitting" 1>&2
			return 2
		fi
	done
	echo "${option}"
}

# Elastic Search Functions {{{
# Finds the field data usage for a given environment
elastic_fielddata() {
	curl "http://${1}:9200/_nodes/stats/indices/fielddata?fields=*" 2>/dev/null \
		| jq -r '.nodes[] | .name + " " + (.indices.fielddata.memory_size_in_bytes | tostring) + " " + (.indices.fielddata.evictions | tostring)' \
		| grep esd \
		| awk -F' ' '{ printf "%-20s %0.2f GB (evictions: %s)\n", $1, $2/1024/1024/1024, $3 }' \
		| sort -V
}
# }}}

# Kubernetes Query Functions {{{
# kpp (kubernetes pick pod) - Allows you to pick a pod and a namespace dynamically from a list
# Example: kpp
kpp() {
	local kube_results selection

	kube_results="$(kubectl get pods --all-namespaces -o wide)"
	selection="$(prompt_for_selection "${kube_results}")"
	K8S_NS="$(awk '{print $1}' <<<"${selection}")"
	K8S_POD="$(awk '{print $2}' <<<"${selection}")"
}

kpr() {
	unset K8S_NS K8S_POD
}

k8s_set_ns_option() {
	local namespace=""

	# Check to see if one of the passed parameters is "-n" and if so, prefer that to set the namespace
	if [[ ${#} -gt 1 ]]; then
		for i in $(seq 1 ${#}); do
			# shellcheck disable=SC2154
			[[ "${argv[i]}" == "-n" && ${#} -gt ${i} ]] && namespace=${argv[i+1]} && break
		done
	fi

	if [[ -n "${namespace:-${K8S_NS}}" ]]; then
		printf -- "-n %s" "${namespace:-${K8S_NS}}"
	else
		printf -- "--all-namespaces"
	fi
}

contains_k8s_selector() {
	[[ "${*}" =~ "-l " ]] && return 0 || return 1
}

get_k8s_pod_based_on_input() {
	if ! contains_k8s_selector "${@}"; then
		echo "${K8S_POD}"
	fi
}

k8s_get_service_logs() {
	local log_selector pod line output
	local -a log_selector_arr k8s_pods

	# if the user has already passed a k8s selector like "-l" then we'll use that instead
	if ! contains_k8s_selector "${@}"; then
		# shellcheck disable=SC1117
		log_selector="$(kgs -o jsonpath="{range .items[*]}{.spec.selector}{'\n'}{end}")"
		if [[ $(wc -l <<<"${log_selector}") -gt 1 ]]; then
			echo "Unable to determine service programatically it's likely that two services exist in the namespace."
			echo "Please specify a '-l' service selector and try again."
			return 1
		fi
		log_selector_arr=("-l" "$(sed -r 's/map\[(.*)\]/\1/g' <<<"${log_selector}" | tr ':' '=' | tr ' ' ',')")
	fi

	IFS=" " read -r -A k8s_pods <<<"$(kubectl get pods $(k8s_set_ns_option "${@}") "${log_selector_arr[@]}" "${@}" \
		-o jsonpath='{range .items[*].metadata.name}{@}{" "}{end}' | awk '{$1=$1};1')"

	if [[ -z "${k8s_pods[*]}" ]]; then
		echo "No pods were found that match selector, please try again."
		return 1
	fi

	for pod in "${k8s_pods[@]}"; do
		output+=$(while read -r line; do \
			printf "%s %s\\n" "${pod}" "${line}"; \
			done < <(kubectl $(k8s_set_ns_option "${@}") logs "${pod}" --timestamps=true);
			echo "."
		)
	done
	sort -k2 <<<${output} | sed 's/^\.//g'
}

k8sctl() {
	local action="${1}" object="${2}"
	shift

	if [[ "${action}" == "logs" ]]; then
		kubectl $(k8s_set_ns_option "${@}") logs $(get_k8s_pod_based_on_input "${@}") --timestamps=true "${@}" | sort -k1
		return
	fi
	shift
	case "${object}" in
		pods)
			kubectl "${action}" "${object}" $(get_k8s_pod_based_on_input "${@}") $(k8s_set_ns_option "${@}") "${@}"
			;;
		namespaces)
			kubectl "${action}" "${object}" ${K8S_NS} "${@}"
			;;
		clusterroles|clusterrolebindings|nodes)
			kubectl "${action}" "${object}" "${@}"
			;;
		*)
			kubectl "${action}" "${object}" $(k8s_set_ns_option "${@}") "${@}"
			;;
	esac
}

# Deletes everything from a given namespace after prompting
k8s_delete_from_namespace() {
	local object="${1}"
	shift

	printf "This will delete all ${object} in the namespace: %s" "$(k8s_set_ns_option "${@}")"
	if prompt_yes_no "Continue?"; then
		# shellcheck disable=SC1117
		for i in $(k8sctl get "${object}" -o jsonpath="{range .items[*]}{.metadata.name}{'\n'}{end}"); do
			k8sctl delete ${object} "${i}"
		done
	fi
}

k8swatch() {
	local object="${1}"
	shift

	while :; do
		date
		K8S_POD="" k8sctl get "${object}" "${@}"
		sleep 5
		echo
	done
}

# pods
kgp() { k8sctl get pods "${@}"; }
kdp() { k8sctl describe pods "${@}"; }
# get pods by namespace instead of by pod name
kgpn() { K8S_POD="" k8sctl get pods "${@}"; }
# list containers running in pod
kglc() {
	k8sctl get pods -o json | \
		jq -r '.status | .initContainerStatuses, .containerStatuses | select(. != null) | .[].name';
}
kgpd() { k8s_delete_from_namespace pod "${@}"; }
# deployments
kgdp() { k8sctl get deployments "${@}"; }
kddp() { k8sctl describe deployments "${@}"; }
kgdpd() { k8s_delete_from_namespace deployment "${@}"; }
# daemonsets
kgds() { k8sctl get daemonsets "${@}"; }
kdds() { k8sctl describe daemonsets "${@}"; }
kgdsd() { k8s_delete_from_namespace daemonset "${@}"; }
# replicaset
kgrs() { k8sctl get replicasets "${@}"; }
kdrs() { k8sctl describe replicasets "${@}"; }
kgrsd() { k8s_delete_from_namespace replicaset "${@}"; }
# statefulsets
kgss() { k8sctl get statefulsets "${@}"; }
kdss() { k8sctl describe statefulsets "${@}"; }
kgssd() { k8s_delete_from_namespace statefulset "${@}"; }
# services
kgs() { k8sctl get services "${@}"; }
kds() { k8sctl describe services "${@}"; }
kgsd() { k8s_delete_from_namespace service "${@}"; }
# cluster roles
kgcr() { k8sctl get clusterroles "${@}"; }
kdcr() { k8sctl describe clusterroles "${@}"; }
kgcrd() { k8s_delete_from_namespace clusterrole "${@}"; }
# cluster role bindings
kgcrb() { k8sctl get clusterrolebindings "${@}"; }
kdcrb() { k8sctl describe clusterrolebindings "${@}"; }
kgcrbd() { k8s_delete_from_namespace cluterrolebinding "${@}"; }
# service accounts
kgsa() { k8sctl get serviceaccounts "${@}"; }
kdsa() { k8sctl describe serviceaccounts "${@}"; }
kgsad() { k8s_delete_from_namespace serviceaccount "${@}"; }
# logs
kgl() { k8sctl logs "${@}"; }
# logs by service
kgls() { k8s_get_service_logs "${@}"; }
# configmaps
kgcm() { k8sctl get configmaps "${@}"; }
kdcm() { k8sctl describe configmaps "${@}"; }
kgcmd() { k8s_delete_from_namespace configmap "${@}"; }
# endpoints
kge() { k8sctl get endpoints "${@}"; }
kde() { k8sctl describe endpoints "${@}"; }
kged() { k8s_delete_from_namespace endpoint "${@}"; }
# namespaces
kgns() { k8sctl get namespaces "${@}"; }
kdns() { k8sctl describe namespaces "${@}"; }
# nodes
kgn() { k8sctl get nodes "${@}"; }
kdn() { k8sctl describe nodes "${@}"; }
# roles
kgr() { k8sctl get roles "${@}"; }
kdr() { k8sctl describe roles "${@}"; }
kgrd() { k8s_delete_from_namespace role "${@}"; }
# role bindings
kgrb() { k8sctl get rolebindings "${@}"; }
kdrb() { k8sctl describe rolebindings "${@}"; }
kgrbd() { k8s_delete_from_namespace rolebinding "${@}"; }
# }}}

# vim: set noet ts=4 sw=4 syntax=sh ft=sh fdm=marker
