# Displays the tmux var valued passed as the first parameter
# shellcheck disable=SC2086
# shellcheck disable=SC2046
tmux_info() {
	local tmux_var="${1}"
	tmux display -pt "${TMUX_PANE:?}" "#{${tmux_var}}"
}

# Automatically try to determine git message
git_make_commit_message () {
	local changed_files message
	changed_files="$(git diff --name-only --cached)"
	repo_name="$(basename "$(git rev-parse --show-toplevel)")"
	if [[ "${repo_name}" == "charts" ]]; then
		message="$(sed -r 's;charts/([^/]+)/.*;\1;' <<<"${changed_files}" | sort -u)"
		if [[ $(wc -l <<<"${message}") -eq 1 ]]; then
			printf "%s" "${message}"
			return 0
		fi
		return 0
	elif [[ "${repo_name}" == "inventory-schema" ]]; then
		message="$(git diff --name-only --cached <<<"${changed_files}" | sed -r 's;poc/[0-9]{3}-([a-zA-Z]+[0-9])[^-]+-.*;\1;' | sort -u)"
		if [[ $(wc -l <<<"${message}") -eq 1 ]]; then
			printf "%s" "${message}"
			return 0
		fi
		return 0
	fi
	# If you don't match anything else, do this
	grep -o '[^/]*$' <<<"${changed_files}"| sed ':a;N;$!ba;s/\n/ \& /g'
	return 0
}

# Automatically creates a git commit message based on the files that are staged and prints it on the line
gitcm () {
	git --no-pager dc
	# shellcheck disable=SC1105,SC2116
	((sleep 0.1 && tmux send-keys -t "$(tmux_info session_name):$(tmux_info window_name).$(tmux_info pane_index)" "$(echo "git cm \"$(git_make_commit_message): ")") &)
}

# Change to a different git worktree
gwtc() {
	cd "$(git worktree list | peco | awk '{print $1}')"
}

# Loads a bunch of color variables into ZSH so that you can reference them as a variable by their name
load_colors () {
	autoload colors
	for COLOR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
		eval $COLOR='$fg_no_bold[${(L)COLOR}]'
		eval BOLD_$COLOR='$fg_bold[${(L)COLOR}]'
		eval BG_$COLOR='$bg[${(L)COLOR}]'
	done
	eval RESET='$reset_color'
}

# Show all local branches based on current user if possible
glbrs() {
	if ! git rev-parse --git-dir &>/dev/null; then
		echo "not in a git repo!"
	fi
	local git_dir user default
	default="refs/heads"
	user="$(git config user.email | cut -d'@' -f1 | tr -d "'")"
	git_dir="$(git rev-parse --git-dir)"
	if [[ -d "${git_dir}/refs/remots/${user}" ]]; then
		git_branch_info "refs/remotes/${user}" "${@}"
	elif [[ -d "${git_dir}/${default}" ]]; then
		git_branch_info "${default}" "${@}"
	else
		echo "unable to find local remote"
	fi
}

# Traverse up to the specified directory
uptil () {
	current_dir="$(pwd)"
	while [[ "$(basename "${current_dir}")" != *"${1}"* ]]; do current_dir="$(dirname "${current_dir}")"; done
	# shellcheck disable=SC2164
	pushd "${current_dir}"
}

set_search_command() {
	EXCLUDE_GIT_PATTERN=( "-name" ".git" "-prune" "-o" )
	sc="find"
	if command -v bfs &> /dev/null; then
		sc="bfs"
	fi
}

# Find a file with a pattern in name
ff() {
	local sc
	set_search_command
	"${sc}" . "${EXCLUDE_GIT_PATTERN[@]}" -type f -iname '*'$*'*' -ls
}

# Find a directory with a pattern in name
fd() {
	local sc
	set_search_command
	"${sc}" . "${EXCLUDE_GIT_PATTERN[@]}" -type d -iname '*'$*'*' -ls
}

# Find everything with a pattern in name
fa() {
	local sc
	set_search_command
	"${sc}" . "${EXCLUDE_GIT_PATTERN[@]}" -iname '*'$*'*' -ls
}

# Find a file with pattern $1 in name and Execute $2 on it
fe() {
	local sc
	set_search_command
	"${sc}" . "${EXCLUDE_GIT_PATTERN[@]}" -type f -iname '*'$1'*' -exec "${2:-file}" {} \;
}

# Ping the specified host and include the date in the output
pingd() { ping $1 | while read -r pong; do echo "$(date): $pong"; done }

# Show broadcast routes for exabgp
exabgp_show_routes() {
	local socket_path="${1:-/run/exabgp/exabgp.socket}"
	if [[ -S "${socket_path}" ]]; then
		echo "show routes" | socat -  "UNIX-CONNECT:${socket_path}"
		return 0
	else
		echo "exabgp socket does not exist: ${socket_path}"
		return 1
	fi
}

# Parses input from selection
prompt_yes_no() {
	local prompt_text="${1}" uinput
	load_colors

	printf "\\n%s%s (y/n): %s" "${BOLD_WHITE}" "${prompt_text}" "${RESET}" 1>&2
	read -r uinput

	case "${uinput}" in
		[yY][eE][sS]|[yY])
			return 0;;
		*)
			return 1;;
	esac
}

# Prompts the user for a selection from a list of line delimitted options
prompt_for_selection() {
	local it uinput option param count bg_color
	local -a results
	load_colors

	count=1
	while read -r it; do
		bg_color=""
		if [[ $(( count % 2 )) -eq 1 ]]; then
			bg_color="${BG_BLACK}"
		fi
		printf "%s[%s%3i%s%s] - %s%s%s\\n" "${bg_color}" "${BOLD_RED}" "$((count++))" "${RESET}" "${bg_color}" "${BLUE}" "${it}" "${RESET}" 1>&2
		results+=( "${it}" )
	done <<<"${1}"
	printf "\\n%sChoose option (q to quit): %s" "${BOLD_WHITE}" "${RESET}" 1>&2
	read -r uinput

	for param in ${uinput}; do
		if [[ "${param}" == "q" ]]; then
			return 1
		fi
		if [[ "${param}" =~ ^[[:digit:]]+$ ]]; then
			option="${results[${param}]}"
			#echo "chose: ${option}" 1>&2
		else
			echo "Option selected was not recognized, quitting" 1>&2
			return 2
		fi
	done
	echo "${option}"
}

# Helps the user change Kubernetes contexts using kubectx
ctx() {
	# If the user has given us a context to switch to, then switch to it, otherwise prompt the user from a list
	if [[ -n "${1}" ]]; then
		kubectx "${1}"
	else
		kubectx | peco | xargs -o kubectx
	fi
}

# Parse go mod graph to find a dependencies parent, return full line from the mod graph when found. Multiple parameters
# can be passed to find the parent of multiple dependencies.
go-find-deps-parent() {
	if [[ ! -e go.mod ]]; then
		echo "Please go to root of a go module project that has a go.mod file in it, then run again"
		return 2
	fi
	local awk_script='
	BEGIN {
		pkgs_num=split(packages, pkgs_arr)
	}
	{
		for (i=1;i<=pkgs_num;++i)
			if ($2 ~ pkgs_arr[i]) print $0
	}
	'
	go mod graph | awk -v packages="${*}" "${awk_script}"
}

# Elastic Search Functions {{{
# Finds the field data usage for a given environment
elastic_fielddata() {
	curl "http://${1}:9200/_nodes/stats/indices/fielddata?fields=*" 2>/dev/null \
		| jq -r '.nodes[] | .name + " " + (.indices.fielddata.memory_size_in_bytes | tostring) + " " + (.indices.fielddata.evictions | tostring)' \
		| grep esd \
		| awk -F' ' '{ printf "%-20s %0.2f GB (evictions: %s)\n", $1, $2/1024/1024/1024, $3 }' \
		| sort -V
}
# }}}

# Kubernetes Query Functions {{{

# kpp (kubernetes pick pod) - Allows you to pick a pod and a namespace dynamically from a list
# Example: kpp
kpp() {
	local kube_results selection namespace

	unset K8S_NS K8S_POD
	kube_results="$(k8sctl get pods "${@}")"
	selection="$(prompt_for_selection "${kube_results}")"
	namespace="$(k8s_get_ns_option "${@}")"
	if [[ -z "${namespace}" ]]; then # if -n wasn't specified in our options
		K8S_NS="$(awk '{print $1}' <<<"${selection}")"
		K8S_POD="$(awk '{print $2}' <<<"${selection}")"
	else
		K8S_NS="${namespace}"
		K8S_POD="$(awk '{print $1}' <<<"${selection}")"
	fi
}

# Pick pod using name label as a subset
kppl() {
	local pod_name="${1}"
	shift
	kpp -l app.kubernetes.io/name="${pod_name}" "${@}"
}

# Reset kpp selection
kpr() {
	unset K8S_NS K8S_POD
}

# Check to see if a namespace is passed as part of the paramters
k8s_get_ns_option() {
	local namespace=""

	# Check to see if one of the passed parameters is "-n" and if so, prefer that to set the namespace
	if [[ ${#} -gt 1 ]]; then
		for i in $(seq 1 ${#}); do
			# shellcheck disable=SC2154
			[[ "${argv[i]}" == "-n" && ${#} -gt ${i} ]] && namespace=${argv[i+1]} && break
		done
	fi
	printf -- "%s" "${namespace}"
}

# Set the namespace if it exists
k8s_set_ns_option() {
	local namespace=""

	namespace="$(k8s_get_ns_option "${@}")"

	if [[ -n "${namespace:-${K8S_NS}}" ]]; then
		printf -- "-n %s" "${namespace:-${K8S_NS}}"
	else
		printf -- "--all-namespaces"
	fi
}

# Check to see if an output option is specified, and if not, define a default of -o wide
k8s_set_default_output_option() {
	local action="${1}"
	shift
	[[ "${action}" != "get" ]] && return 0
	[[ "${*}" =~ "-o " ]] && return 0
	echo "-o wide"
}

# Check to see if the args contain a k8s label selector (-l)
contains_k8s_selector() {
	[[ "${*}" =~ "-l " ]] && return 0 || return 1
}

# Strip -l and -n selectors from input parameters and return the rest
k8s_strip_selectors() {
	local stripped_params=""

	while [[ $# -ne 0 ]]; do
		if [[ "${1}" =~ ^(-n|-l)$ ]]; then
			shift 2
		else
			stripped_params+="${1} "
			shift
		fi
	done
	printf -- "%s" "${stripped_params}"
}

# Sets the k8s pod if the input doesn't already contain a selector
get_k8s_pod_based_on_input() {
	if ! contains_k8s_selector "${@}"; then
		echo "${K8S_POD}"
	fi
}

# Attempts to aggregate logs of all pods that match a given selector or by service if there is only one service in the
# pre-selected namespace
k8s_get_service_logs() {
	local log_selector pod line output
	local -a log_selector_arr k8s_pods

	# if the user has already passed a k8s selector like "-l" then we'll use that instead
	if ! contains_k8s_selector "${@}"; then
		pod_selector="$(kgp -o jsonpath="{.metadata.labels.app\.kubernetes\.io/name}{'\n'}")"
		if [[ -z "${pod_selector}" ]]; then
			echo "Unable to determine the value of metadata.labels[app.kubernetes.io/name] for pod, either the pod"
			echo "doesn't have this label, or you don't have a pod selected with kpp"
			return 1
		fi
		log_selector_arr=("-l" "app.kubernetes.io/name=${pod_selector}")
	fi

	kubectl logs $(k8s_set_ns_option "${@}") "${log_selector_arr[@]}" --timestamps=true --prefix=true $(k8s_strip_selectors "${@}")
}

# Generic kubectl abstraction that attempts to take care of practical defaults and previous selections
k8sctl() {
	local action="${1}" object="${2}"
	local -a new_params
	for param in "${@}"; do
		if [[ "${param}" == "--edit" ]]; then
			action="edit"
		else
			new_params+=( "${param}" )
		fi
	done
	set -- "${new_params[@]}"
	shift

	if [[ "${action}" == "logs" ]]; then
		local nosort=0
		# If we're following we don't want to pipe into sort or it will never return or show output
		[[ "${*}" =~ "-f" ]] && nosort=1
		if [[ "${nosort}" -eq 1 ]]; then
			kubectl $(k8s_set_ns_option "${@}") logs $(get_k8s_pod_based_on_input "${@}") --timestamps=true "${@}"
		else
			kubectl $(k8s_set_ns_option "${@}") logs $(get_k8s_pod_based_on_input "${@}") --timestamps=true "${@}" | sort -k1
		fi
		return
	fi
	if [[ "${action}" == "exec" ]]; then
		local nosort=0
		kubectl $(k8s_set_ns_option "${@}") exec $(get_k8s_pod_based_on_input "${@}") -ti "${@}"
		return
	fi
	shift
	case "${object}" in
		pods)
			kubectl "${action}" "${object}" $(get_k8s_pod_based_on_input "${@}") $(k8s_set_ns_option "${@}") \
				$(k8s_set_default_output_option "${action}" "${@}") "${@}"
			;;
		namespaces)
			kubectl "${action}" "${object}" ${K8S_NS} $(k8s_set_default_output_option "${action}" "${@}") "${@}"
			;;
		clusterroles|clusterrolebindings|nodes)
			kubectl "${action}" "${object}" $(k8s_set_default_output_option "${action}" "${@}") "${@}"
			;;
		*)
			kubectl "${action}" "${object}" $(k8s_set_ns_option "${@}") \
				$(k8s_set_default_output_option "${action}" "${@}") "${@}"
			;;
	esac
}

# Deletes pod from a given namespace based upon selection after prompting
k8s_delete_pod_from_namespace() {
	printf "This will delete the given pod %s in the namespace: %s" "${K8S_POD}" "${K8S_NS}"
	if prompt_yes_no "Continue?"; then
		k8sctl delete pod "${K8S_POD}" "${@}"
	fi
}

# Execs into a pod from a given namespace based upon selection
k8s_exec_pod_from_namespace() {
	k8sctl exec "${K8S_POD}" "${@}"
}

# Deletes everything from a given namespace after prompting
k8s_delete_from_namespace() {
	local object="${1}"
	shift

	printf "This will delete all %s in the namespace: %s" "${object}" "$(k8s_set_ns_option "${@}")"
	if prompt_yes_no "Continue?"; then
		# shellcheck disable=SC1117
		for i in $(k8sctl get "${object}" "${@}" -o jsonpath="{range .items[*]}{.metadata.name}{'\n'}{end}"); do
			k8sctl delete ${object} "${i}" "${@}"
		done
	fi
}

# manually watch a given object with given selectors by printing info about it every 5 seconds
k8swatch() {
	local object="${1}"
	shift

	while :; do
		date
		K8S_POD="" k8sctl get "${object}" "${@}"
		sleep 5
		echo
	done
}

# pods
kgp() { k8sctl get pods "${@}"; }
kdp() { k8sctl describe pods "${@}"; }
# get pods by namespace instead of by pod name
kgpn() { K8S_POD="" k8sctl get pods "${@}"; }
# get pods by name label
kgpl() { local pod_name="${1}"; shift; k8sctl get pods -l app.kubernetes.io/name="${pod_name}" "${@}"; }
kdpl() { local pod_name="${1}"; shift; k8sctl describe pods -l app.kubernetes.io/name="${pod_name}" "${@}"; }
# list containers running in pod
kglc() {
	k8sctl get pods -o json | \
		jq -r '.status | .initContainerStatuses, .containerStatuses | select(. != null) | .[].name';
}
kgpd() { k8s_delete_pod_from_namespace "${@}"; }
kgpe() { k8s_exec_pod_from_namespace "${@}"; }
# deployments
kgdp() { k8sctl get deployments "${@}"; }
kddp() { k8sctl describe deployments "${@}"; }
kgdpd() { k8s_delete_from_namespace deployment "${@}"; }
# daemonsets
kgds() { k8sctl get daemonsets "${@}"; }
kdds() { k8sctl describe daemonsets "${@}"; }
kgdsd() { k8s_delete_from_namespace daemonset "${@}"; }
# replicaset
kgrs() { k8sctl get replicasets "${@}"; }
kdrs() { k8sctl describe replicasets "${@}"; }
kgrsd() { k8s_delete_from_namespace replicaset "${@}"; }
# statefulsets
kgss() { k8sctl get statefulsets "${@}"; }
kdss() { k8sctl describe statefulsets "${@}"; }
kgssd() { k8s_delete_from_namespace statefulset "${@}"; }
# prometheus
kgpr() { k8sctl get prometheus "${@}"; }
kdpr() { k8sctl describe prometheus "${@}"; }
# services
kgs() { k8sctl get services "${@}"; }
kds() { k8sctl describe services "${@}"; }
kgsd() { k8s_delete_from_namespace service "${@}"; }
# service monitors
kgsm() { k8sctl get servicemonitors "${@}"; }
kdsm() { k8sctl describe servicemonitors "${@}"; }
kgsmd() { k8s_delete_from_namespace servicemonitors "${@}"; }
# cluster roles
kgcr() { k8sctl get clusterroles "${@}"; }
kdcr() { k8sctl describe clusterroles "${@}"; }
kgcrd() { k8s_delete_from_namespace clusterrole "${@}"; }
# cluster role bindings
kgcrb() { k8sctl get clusterrolebindings "${@}"; }
kdcrb() { k8sctl describe clusterrolebindings "${@}"; }
kgcrbd() { k8s_delete_from_namespace cluterrolebinding "${@}"; }
# service accounts
kgsa() { k8sctl get serviceaccounts "${@}"; }
kdsa() { k8sctl describe serviceaccounts "${@}"; }
kgsad() { k8s_delete_from_namespace serviceaccount "${@}"; }
# logs
kgl() { k8sctl logs "${@}"; }
# logs by service
kgls() { k8s_get_service_logs "${@}"; }
# ALL logs by service
kglsa() { k8s_get_service_logs "--tail=-1" "${@}"; }
# configmaps
kgcm() { k8sctl get configmaps "${@}"; }
kdcm() { k8sctl describe configmaps "${@}"; }
kgcmd() { k8s_delete_from_namespace configmap "${@}"; }
# endpoints
kge() { k8sctl get endpoints "${@}"; }
kde() { k8sctl describe endpoints "${@}"; }
kged() { k8s_delete_from_namespace endpoint "${@}"; }
# namespaces
kgns() { k8sctl get namespaces "${@}"; }
kdns() { k8sctl describe namespaces "${@}"; }
# nodes
kgn() { k8sctl get nodes "${@}"; }
kdn() { k8sctl describe nodes "${@}"; }
# roles
kgr() { k8sctl get roles "${@}"; }
kdr() { k8sctl describe roles "${@}"; }
kgrd() { k8s_delete_from_namespace role "${@}"; }
# role bindings
kgrb() { k8sctl get rolebindings "${@}"; }
kdrb() { k8sctl describe rolebindings "${@}"; }
kgrbd() { k8s_delete_from_namespace rolebinding "${@}"; }
# secrets
kgse() { k8sctl get secrets "${@}"; }
kdse() { k8sctl describe secrets "${@}"; }
# jobs
kgj() { k8sctl get job "${@}"; }
kdj() { k8sctl describe job "${@}"; }
kgjd() { k8s_delete_from_namespace job "${@}"; }
# resource quotas
kgrq() { k8sctl get resourcequotas "${@}"; }
kdrq() { k8sctl describe resourcequotas "${@}"; }
# pod disruption budgets
kgpdb() { k8sctl get poddisruptionbudgets.policy "${@}"; }
kdpdb() { k8sctl describe poddisruptionbudgets.policy "${@}"; }
# network policy
kgnp() { k8sctl get networkpolicy "${@}"; }
kdnp() { k8sctl describe networkpolicy "${@}"; }
# pod security policy
kgpsp() { k8sctl get podsecuritypolicy "${@}"; }
kdpsp() { k8sctl describe podsecuritypolicy "${@}"; }
# cronjobs
kgcj() { k8sctl get cronjob "${@}"; }
kdcj() { k8sctl describe cronjob "${@}"; }
# ingress
kgi() { k8sctl get ingress "${@}"; }
kdi() { k8sctl describe ingress "${@}"; }
# storageclasses
kgsc() { k8sctl get storageclasses "${@}"; }
kdsc() { k8sctl describe storageclasses "${@}"; }
# persistentvolumes
kgpv() { k8sctl get persistentvolumes "${@}"; }
kdpv() { k8sctl describe persistentvolumes "${@}"; }
# persistentvolumeclaims
kgpvc() { k8sctl get persistentvolumeclaims "${@}"; }
kdpvc() { k8sctl describe persistentvolumeclaims "${@}"; }
# prometheusrules
kgpru() { k8sctl get prometheusrules "${@}"; }
kdpru() { k8sctl describe prometheusrules "${@}"; }
# cert-manager certificates
kgce() { k8sctl get certificates "${@}"; }
kdce() { k8sctl describe certificates "${@}"; }
# cert-manager certificate requests
kgcer() { k8sctl get certificaterequests "${@}"; }
kdcer() { k8sctl describe certificaterequests "${@}"; }
# cert-manager issuers
kgcei() { k8sctl get issuers "${@}"; }
kdcei() { k8sctl describe issuers "${@}"; }
# cert-manager cluster issuers
kgceci() { k8sctl get clusterissuers "${@}"; }
kdceci() { k8sctl describe clusterissuers "${@}"; }
# admissioncontroller mutatingwebhook
kgmwh() { k8sctl get mutatingwebhookconfigurations "${@}"; }
kdmwh() { k8sctl describe mutatingwebhookconfigurations "${@}"; }
# admissioncontroller validatingwebhook
kgvwh() { k8sctl get validatingwebhookconfigurations "${@}"; }
kdvwh() { k8sctl describe validatingwebhookconfigurations "${@}"; }

### Don't forget to add your function ^^ to the array and case for completions in section below

K8S_FUNCS=(kpp kgp kgdp kddp kgds kdds kgrs kdrs kgss kdss)
K8S_FUNCS+=(kgpr kdpr kgs kds kgsm kdsm kgcr kdcr kgcrb kdcrb kgsa kdsa kgl)
K8S_FUNCS+=(kgcm kdcm kge kde kgns kdns kgn kdn kgr kdr kgrb kdrb kgse kdse kgj kdj kgjd kgrq)
K8S_FUNCS+=(kdrq kgpdb kdpdb kgnp kdnp kgpsp kdpsp kgcj kdcj kgi kdi kgsc kdsc kgpv kdpv kgpvc kdpvc kgpru kdpru kgce)
K8S_FUNCS+=(kdce kgcer kdcer kgcei kdcei kgceci kdceci kgmwh kdmwh kgvwh kdvwh)

# }}}

# Kubernetes Command Completions {{{

### These were needed in order to be able to use the bash completion logic (compgen)
# These come from /usr/share/zsh/functions/Completion/bashcompinit (or relevent path depending on your distro)
autoload bashcompinit
bashcompinit

### These were mostly taken verbatim from the default kubectl completion functions (I also renamed them so they wouldn't have the possibility of conflicting)
__k_override_flag_list=(--kubeconfig --cluster --user --context --namespace --server -n -s)
__k_parse_get() {
	local template
	template="${2:-"{{ range .items  }}{{ .metadata.name }} {{ end }}"}"
	local kubectl_out
	if kubectl_out=$(__k_debug_out "kubectl get $(__k_override_flags) -o template --template=\"${template}\" \"$1\""); then
		COMPREPLY+=($( __k_compgen -W "${kubectl_out[*]}" -- "$cur" ))
		__k_parse_reply
	fi
}

__k_compgen () {
	local completions w
	completions=($(compgen "$@"))  || return $?
	while [[ "$1" = -* && "$1" != -- ]]
	do
		shift
		shift
	done
	if [[ "$1" == -- ]]
	then
		shift
	fi
	for w in "${completions[@]}"
	do
		if [[ "${w}" = "$1"* ]]
		then
			echo "${w}"
		fi
	done
}

__k_debug_out() {
	local cmd="$1"
	__k_debug "${FUNCNAME[1]}: get completion by ${cmd}"
	eval "${cmd} 2>/dev/null"
}

__k_debug() {
	if [[ -n ${BASH_COMP_DEBUG_FILE} ]]; then
		echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
	fi
}

__k_override_flags() {
	local ${__k_override_flag_list[*]##*-} two_word_of of var
	for w in "${words[@]}"; do
		if [ -n "${two_word_of}" ]; then
			eval "${two_word_of##*-}=\"${two_word_of}=\${w}\""
			two_word_of=
			continue
		fi
		for of in "${__k_override_flag_list[@]}"; do
			case "${w}" in
				${of}=*)
					eval "${of##*-}=\"${w}\""
					;;
				${of})
					two_word_of="${of}"
					;;
			esac
		done
	done
	for var in "${__k_override_flag_list[@]##*-}"; do
		if eval "test -n \"\$${var}\""; then
			eval "echo -n \${${var}}' '"
		fi
	done
}

__k_parse_reply() {
	compadd "${COMPREPLY[@]}"
}

__k_get_resource_namespace() {
	__k_parse_get "namespace"
}


### This is where most of the work is done and this is 100% mine
# The best place for info on this is the specs: overview and specs: action section of: http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Completion-System
# Also for a more simplified reference see: https://mads-hartmann.com/2017/08/06/writing-zsh-completion-scripts.html
# For an even simpler reference see also: https://mrigank11.github.io/2018/03/zsh-auto-completion/
__k_comp_entrypoint() {
	# for some reason that I can't figure out, I cannot declare the "words" variable in any way here or the whole
	# function will stop working (this is because words is used by zsh to send parts of the command, at some point I
	# may need to stop using it)
	local COMPREPLY opt_debug command_name command_type
	local context state state_descr line
	typeset -A opt_args
	command_name="${words[1]}"

	# this function call is what fills the above variables (except for COMPREPLY, words)
	# As an example of how this fills in the above variables
	# When called with kgp -n datapipeline -l blink foo<tab>:
	# Variables look as follows: __k_comp_entrypoint executed - context: '' state: 'args' state_descr: 'arg' line: '-l blink foo' namespaces: '' args: '' opt_args: '-n->datapipeline;'
	_arguments -C \
		"-n:namespace:->namespaces" \
		"--namespace:namespace:->namespaces" \
		"*::arg:->args"

	# The following will write to the BASH_COMP_DEBUG_FILE value if it is set, which is super helpful for debugging
	opt_debug=""
	for key val in "${(@kv)opt_args}"; do
		opt_debug+="${key}->${val};"
	done
	__k_debug "__k_comp_entrypoint executed - context: '${context}' state: '${state}' state_descr: '${state_descr}' line: '${line}' namespaces: '${namespaces}' args: '${args}' opt_args: '${opt_debug}'"

	# This handles getting the namespace fills whenever either -n or --namespaces is passed
	if [[ "${state}" == "namespaces" ]]; then
		__k_get_resource_namespace
	fi

	# Now we handle getting the arguments passed
	if [[ "${state}" == "args" ]]; then
		# First we need to parse out whether or not a namespace has been specified and add it to the words array so
		# that __k_override_flags() can handle it
		if [[ -n "${opt_args[-n]}" ]]; then
			words+=("-n" "${opt_args[-n]}")
		fi
		if [[ -n "${opt_args[--namespace]}" ]]; then
			words+=("--namespace" "${opt_args[--namespace]}")
		fi

		# If K8S_NS has been set via kpp or something like it, honor that too
		__k_debug "Contents of K8S_NS: ${K8S_NS} Array length: ${#words[@]}"
		if [[ ${#words[@]} -lt 2 && -n "${K8S_NS}" ]]; then
			__k_debug "Entering"
			words+=("-n" "${K8S_NS}")
		fi

		command_subset="${command_name[3,-1]}"
		__k_debug "Command name: ${command_name} - Command substring ${command_subset}"
		case ${command_subset} in
			p|l)
				command_type="pod"
				;;
			dp)
				command_type="deployment"
				;;
			rs)
				command_type="replicaset"
				;;
			ss)
				command_type="statefulset"
				;;
			pr)
				command_type="prometheus"
				;;
			s)
				command_type="service"
				;;
			sm)
				command_type="servicemonitors"
				;;
			cr)
				command_type="clusterroles"
				;;
			crb)
				command_type="clusterrolebindings"
				;;
			sa)
				command_type="serviceaccounts"
				;;
			cm)
				command_type="configmaps"
				;;
			e)
				command_type="endpoints"
				;;
			ns)
				command_type="namespaces"
				;;
			n)
				command_type="nodes"
				;;
			r)
				command_type="roles"
				;;
			rb)
				command_type="rolebindings"
				;;
			se)
				command_type="secrets"
				;;
			j)
				command_type="jobs"
				;;
			rq)
				command_type="resourcequotas"
				;;
			pdb)
				command_type="poddisruptionbudgets.policy"
				;;
			np)
				command_type="networkpolicy"
				;;
			psp)
				command_type="podsecuritypolicy"
				;;
			cj)
				command_type="cronjob"
				;;
			i)
				command_type="ingress"
				;;
			sc)
				command_type="storageclasses"
				;;
			pv)
				command_type="persistentvolumes"
				;;
			pvc)
				command_type="persistentvolumeclaims"
				;;
			pru)
				command_type="prometheusrules"
				;;
			ce)
				command_type="certificates"
				;;
			ce)
				command_type="certificaterequests"
				;;
			cei)
				command_type="issuers"
				;;
			ceci)
				command_type="clusterissuers"
				;;
			mwh)
				command_type="mutatingwebhookconfigurations"
				;;
			vwh)
				command_type="validatingwebhookconfigurations"
				;;
			*)
				return 0
				;;
		esac
		__k_debug "Using command_type: ${command_type}"
		__k_parse_get "${command_type}"
	fi
}

# }}}

# Linux Networking Functions {{{

# Get all of the IPs behind an IPVS VIP along with their stats
ipvs-get-vip() {
	local vip="${1}"
	ipvsadm -l -n | awk -v vip="${vip}" \
		'BEGIN{a=0}; $0 ~ vip {a=1; print $0; next}; a==1 {if($0 ~ /TCP|UDP/) {exit}; print $0};'
}
# }}}

# vim: set noet ts=4 sw=4 syntax=sh ft=sh fdm=marker
